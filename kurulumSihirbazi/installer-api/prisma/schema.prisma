generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  OPERATOR
  VIEWER
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String
  role         Role     @default(VIEWER)
  status       String   @default("active")
  lastLoginAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sessions     Session[]
  apiKeys      ApiKey[]
  auditLogs    AuditLog[] @relation("AuditActor")
  partnerMembership PartnerMember?
}

model Session {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  refreshJti   String   @unique
  userAgent    String?
  ip           String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  revokedAt    DateTime?
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  tokenHash   String   @unique
  scopes      String[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  lastUsedAt  DateTime?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model Customer {
  id           String   @id @default(cuid())
  slug         String   @unique
  companyName  String?
  domain       String   @unique
  mode         String   @default("local")
  portsBackend Int
  portsAdmin   Int
  portsStore   Int
  dbName       String?
  dbUser       String?
  dbHost       String?
  dbPort       Int?
  dbSchema     String?  @default("public")
  redisHost    String?
  redisPort    Int?
  redisPrefix  String?
  status       String   @default("stopped")
  version      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deployments  Deployment[]
  partner      Partner? @relation(fields: [partnerId], references: [id])
  partnerId    String?
}

model Deployment {
  id         String   @id @default(cuid())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  step       String
  status     String
  log        Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AuditLog {
  id         String   @id @default(cuid())
  actor      User?    @relation("AuditActor", fields: [actorId], references: [id])
  actorId    String?
  action     String
  targetType String?
  targetId   String?
  metadata   Json?
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  tokenHash String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())
}

// --- Partner Ekosistemi ---

model Partner {
  id           String           @id @default(cuid())
  name         String
  status       String           @default("approved") // pending|approved|rejected|suspended
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  members      PartnerMember[]
  wallet       PartnerWallet?
  ledger       PartnerLedger[]
  pricing      PartnerPricing?
  applications PartnerApplication[]
  customers    Customer[]
}

model PartnerMember {
  id        String  @id @default(cuid())
  partner   Partner @relation(fields: [partnerId], references: [id])
  partnerId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  role      String
  createdAt DateTime @default(now())
}

model PartnerWallet {
  id        String  @id @default(cuid())
  partner   Partner @relation(fields: [partnerId], references: [id])
  partnerId String  @unique
  balance   Int     @default(0)
  updatedAt DateTime @updatedAt
}

model PartnerLedger {
  id         String  @id @default(cuid())
  partner    Partner @relation(fields: [partnerId], references: [id])
  partnerId  String
  delta      Int
  reason     String  // GRANT|CONSUME|ADJUST|RESERVE|RESERVE_CANCEL
  reference  String?
  byUserId   String?
  note       String?
  createdAt  DateTime @default(now())
  @@index([partnerId, createdAt(sort: Desc)])
}

model PartnerPricing {
  id           String  @id @default(cuid())
  partner      Partner @relation(fields: [partnerId], references: [id])
  partnerId    String  @unique
  setupCredits Int
  updatedAt    DateTime @updatedAt
}

model PartnerApplication {
  id        String   @id @default(cuid())
  partner   Partner? @relation(fields: [partnerId], references: [id])
  partnerId String?
  form      Json
  status    String   @default("pending")
  createdAt DateTime @default(now())
  decidedAt DateTime?
  decidedBy String?
}

model GitSettings {
  id            Int      @id @default(autoincrement())
  defaultRepo   String?
  defaultBranch String?  @default("main")
  depth         Int?     @default(1)
  username      String?
  token         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
